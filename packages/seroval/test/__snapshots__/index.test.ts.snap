// Vitest Snapshot v1

exports[`serialize > Error > supports Error.prototype.cause 1`] = `"new Error(\\"B\\",{cause:new Error(\\"A\\")})"`;

exports[`serialize > Error > supports Error.prototype.name 1`] = `"Object.assign(new Error(\\"A\\"),{name:\\"ExampleError\\"})"`;

exports[`serialize > Error > supports other Error classes 1`] = `"new ReferenceError(\\"A\\")"`;

exports[`serialize > mutual cyclic references > supports Arrays and Arrays 1`] = `"((h,j,k)=>(k=[h=[j=[,]],j],j[0]=h,k))()"`;

exports[`serialize > mutual cyclic references > supports Arrays and Objects 1`] = `"((h,j,k)=>(k=[h=[j={}],j],j[0]=h,k))()"`;

exports[`serialize > mutual cyclic references > supports Objects and Objects 1`] = `"((h,j,k)=>(k=[h={0:j={}},j],j[0]=h,k))()"`;

exports[`serialize > self cyclic references > supports Arrays 1`] = `"(h=>(h=[,,],h[1]=h[0]=h,h))()"`;

exports[`serialize > self cyclic references > supports Maps 1`] = `"(h=>(h=new Map,h.set(h,h),h))()"`;

exports[`serialize > self cyclic references > supports Objects 1`] = `"(h=>(h={},h.b=h.a=h,h))()"`;

exports[`serialize > self cyclic references > supports Sets 1`] = `"(h=>(h=new Set,h.add(h),h))()"`;

exports[`serialize > supports Arrays 1`] = `"[1,2,3]"`;

exports[`serialize > supports Iterables 1`] = `"(Object.assign({[Symbol.iterator]:()=>[1,2,3].values()},{title:\\"Hello World\\"}))"`;

exports[`serialize > supports Map 1`] = `"new Map([[1,2],[3,4]])"`;

exports[`serialize > supports Object.create(null) 1`] = `"Object.assign(Object.create(null),{hello:\\"world\\"})"`;

exports[`serialize > supports Objects 1`] = `"({hello:\\"world\\"})"`;

exports[`serialize > supports RegExp 1`] = `"/[a-z0-9]+/i"`;

exports[`serialize > supports array holes 1`] = `"[,,,,,,,,,,]"`;

exports[`serialize > supports bigint 1`] = `"BigInt(\\"9007199254740991\\")"`;

exports[`serialize > supports strings 1`] = `"\\"\\\\\\"hello\\\\\\"\\""`;

exports[`serialize > supports strings 2`] = `"\\"\\\\x3Cscript>\\\\x3C/script>\\""`;
